{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "07d8dad4-120d-4850-93a0-c349fde68ab7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n",
      "\u001b[2m   Use a production WSGI server instead.\u001b[0m\n",
      " * Debug mode: off\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "[2022-04-08 21:20:26,633] ERROR in app: Exception on / [GET]\n",
      "Traceback (most recent call last):\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/flask/app.py\", line 2447, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/flask/app.py\", line 1952, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/flask/app.py\", line 1821, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/flask/_compat.py\", line 39, in reraise\n",
      "    raise value\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/flask/app.py\", line 1950, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/flask/app.py\", line 1936, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"/tmp/ipykernel_10975/1852938581.py\", line 24, in getInput\n",
      "    return render_template('index.html',form=form)\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/flask/templating.py\", line 138, in render_template\n",
      "    ctx.app.jinja_env.get_or_select_template(template_name_or_list),\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/jinja2/environment.py\", line 930, in get_or_select_template\n",
      "    return self.get_template(template_name_or_list, parent, globals)\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/jinja2/environment.py\", line 883, in get_template\n",
      "    return self._load_template(name, self.make_globals(globals))\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/jinja2/environment.py\", line 857, in _load_template\n",
      "    template = self.loader.load(self, name, globals)\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/jinja2/loaders.py\", line 127, in load\n",
      "    code = environment.compile(source, name, filename)\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/jinja2/environment.py\", line 638, in compile\n",
      "    self.handle_exception(source=source_hint)\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/jinja2/environment.py\", line 832, in handle_exception\n",
      "    reraise(*rewrite_traceback_stack(source=source))\n",
      "  File \"/home/swarnava-deep/anaconda3/lib/python3.9/site-packages/jinja2/_compat.py\", line 28, in reraise\n",
      "    raise value.with_traceback(tb)\n",
      "  File \"/home/swarnava-deep/Documents/Untitled Folder/template/index.html\", line 9, in template\n",
      "    {% endblock% }\n",
      "jinja2.exceptions.TemplateSyntaxError: expected token 'end of statement block', got '%'\n",
      "127.0.0.1 - - [08/Apr/2022 21:20:26] \"GET / HTTP/1.1\" 500 -\n"
     ]
    }
   ],
   "source": [
    "from flask import Flask,jsonify,render_template\n",
    "import requests\n",
    "from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
    "import pandas as pd\n",
    "from requests_html import HTMLSession\n",
    "import matplotlib.pyplot as plt\n",
    "from flask_wtf import FlaskForm\n",
    "from wtforms import StringField, SubmitField\n",
    "\n",
    "\n",
    "\n",
    "app=Flask(__name__,template_folder='template')\n",
    "app.config['SECRET_KEY'] = 'any secret string'\n",
    "\n",
    "\n",
    "class getInputForm(FlaskForm):\n",
    "    companies = StringField('companies')\n",
    "    submit = SubmitField('pass')\n",
    "\n",
    "\n",
    "@app.route('/',methods=['GET','POST'])   \n",
    "def getInput():\n",
    "    form = getInputForm()\n",
    "    return render_template('index.html',form=form)\n",
    "    \n",
    "\n",
    "  \n",
    "    \n",
    "app.run()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dffaf59b-b859-44d7-bfc0-ec9834591b6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def getInfo(companies):\n",
    "    \n",
    "    \n",
    "    list_company=companies.split(\",\")\n",
    "\n",
    "\n",
    "\n",
    "    data=[]\n",
    "    for i in list_company:\n",
    "        try:\n",
    "\n",
    "            company = i.strip().replace(' ','-')\n",
    "\n",
    "            # print(company)\n",
    "\n",
    "\n",
    "            try:\n",
    "                url = \"https://www.ndtv.com/search?searchtext=\"+company\n",
    "                session = HTMLSession()\n",
    "                response = session.get(url)\n",
    "\n",
    "            except requests.exceptions.RequestException as e:\n",
    "                print(\"Enter valid Company\")\n",
    "            get_nav_links = response.html.find('ul.src_lst-ul')\n",
    "\n",
    "            news = get_nav_links[0].text[:get_nav_links[0].text.index(\"More News\")].split(\"\\n\")\n",
    "            # print(news)\n",
    "            news_list=[]\n",
    "\n",
    "            pos=1\n",
    "            for i in range(len(news)):\n",
    "                news_list.append(news[i].split(\"|\"))\n",
    "            # print(news_list)\n",
    "            #extracting date\n",
    "            dates=[]\n",
    "            i=1  \n",
    "            while (i < len(news_list)):\n",
    "\n",
    "                dates.append(news_list[i][-1].split(\",\")[-1])\n",
    "                i=i+4\n",
    "                # print(dates)\n",
    "            # print(\"==================================================\",end=\"\\n\")\n",
    "            #extracting heading\n",
    "            headings=[]\n",
    "\n",
    "            i=0 \n",
    "\n",
    "            while (i < len(news_list)):\n",
    "\n",
    "                headings.append(news_list[i][0])\n",
    "                i=i+4\n",
    "\n",
    "\n",
    "            # print(headings)\n",
    "            j=2\n",
    "            text=[]\n",
    "            while (j < len(news_list)):\n",
    "                text.append(news_list[j][0])\n",
    "                j=j+4\n",
    "            # print(text)\n",
    "            # print(\"==================================================\",end=\"\\n\")\n",
    "\n",
    "            total_text = []\n",
    "\n",
    "            for i,j in zip(text,headings):\n",
    "                total_text.append(i+j)\n",
    "            # print(total_text)\n",
    "\n",
    "            company_name = []\n",
    "            for i in range(len(dates)):\n",
    "                company_name.append(company);\n",
    "            # print(company_name)\n",
    "\n",
    "\n",
    "            for a, b, c in zip(company_name,total_text,dates):\n",
    "\n",
    "                data.append([a, b, c])\n",
    "        except Exception as e:\n",
    "            print(\"ENter the right company name\")\n",
    "\n",
    "\n",
    "\n",
    "    # print(data[0])\n",
    "    df = pd.DataFrame(data,columns =['Company','Total_text','Date'])\n",
    "    df\n",
    "    vader  = SentimentIntensityAnalyzer()\n",
    "    f = lambda text: vader.polarity_scores(text)['compound']\n",
    "    df['Compound'] = df['Total_text'].apply(f)\n",
    "    df['Date'] = df['Date'].astype(int)\n",
    "\n",
    "    mean_df = df.groupby(['Company']).mean()\n",
    "    mean_df.transpose()\n",
    "    ax = mean_df.plot( kind='bar',y='Compound',rot=0).figure.savefig('plot',\n",
    "                pad_inches = 10)\n",
    "    return ax\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54498786-a4a9-41f2-b4cf-e16487248e0d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
